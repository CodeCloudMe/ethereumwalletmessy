//global for a send completion status

 sendingCompleted= false;

 bum = [];

 $transactionScope=[];

function checkAndRedirectHTTPS() {
    var e = "myetherwallet.com",
        t = "kvhnuke.github.io",
        r = "www.kvhnuke.github.io",
        a = "www.myetherwallet.com";
    e != window.location.host && t != window.location.host && a != window.location.host && r != window.location.host || "https:" == window.location.protocol || (window.location.protocol = "https")
}

function checkAndLoadPageHash() {
    if (window.location.hash) {
        var e = window.location.hash.substr(1);
        $(".ptabs").each(function(t) {
            return $(this).attr("id") == e ? ($(this).click(), void setTimeout(function() {
                $("html,body").scrollTop(0)
            }, 50)) : void 0
        })
    }
}

function paneNavigate(e, t) {
    hideAllMainContainers(), $("#" + e).show(), $("#" + t).parent().addClass("active"), location.hash = t, $("html,body").scrollTop(0)
}

function bindElements() {
    $(".ptabs").each(function(e) {
        $(this).click(function() {
            paneNavigate($(this).attr("showId"), this.id)
        })
    }), $("#privkeyenc,#address,#privkey").click(function() {
        this.focus(), this.select()
    }), $("#btndonate").click(function() {
        $("#sendtxaddress").val("0x7cb57b5a97eabe94205c07890be4c1ad31e486a8"), $("#donateThanks").show(), $("#sendtxaddress").trigger("keyup")
    }), $("#generatewallet").click(function() {
        generateSingleWallet()
    }), $("#btngeneratetranaction").click(function() {
        preCreateTransaction()
    }), $("#printqr").click(function() {
        printQRcode()
    }), $("#btnapprovesend").click(function() {
        preSendTransaction()
    }), $("#bulkgenerate").click(function() {
        generateBulkWallets()
    }), $("#transferAllBalance").click(function() {
        getMaxSendAmount($("#accountAddress").html(), function(e) {
            $("#sendtxamount").val(e), $("input[type=radio][name=currencyRadio][value=ether]").prop("checked", !0), $("#sendtxamount").trigger("keyup")
        }, function(e) {
            $("#txcreatestatus").html('<p class="text-center text-danger"><strong> ' + e + "</strong></p>").fadeIn(50).fadeOut(3e3)
        })
    }), $("#decryptdata").click(function() {
        $("#decryptStatus").html('<p class="text-center text-info"><strong> Please Wait...</strong></p>').fadeIn(10), setTimeout(function() {
            decryptFormData()
        }, 100)
    }), $("input[type=radio][name=typeOfKeyRadio]").change(function() {
        PrivKey = "", $("#fuploadStatus").empty(), $("#walletfilepassword").val(""), $("#privkeypassword").val(""), $(".btn-file :file").val(""), $("#manualprivkey").val(""), $("#walletuploadbutton").hide(), $("#walletPasdiv").hide(), $("#divprikeypassword").hide(), $("#wallettransactions").hide(), $("#decryptStatus").hide(), "fileupload" == this.value ? ($("#selectedTypeKey").hide(), $("#selectedUploadKey").show(), decryptType = "fupload") : "pasteprivkey" == this.value && ($("#selectedUploadKey").hide(), $("#selectedTypeKey").show(), decryptType = "privkey")
    }), $("input[type=radio][name=currencyRadio]").change(function() {
        $("#sendtxamount").trigger("keyup")
    }), $("#walletfilepassword").on("paste, keyup", function() {
        "" != $("#walletfilepassword").val() ? ($("#uploadbtntxt-wallet").show(), $("#uploadbtntxt-privkey").hide(), $("#walletuploadbutton").show()) : $("#walletuploadbutton").hide()
    }), $("#sendtxamount").on("paste, keyup", function() {
        var e = $("#sendtxamount").val();
        if ("" != $("#sendtxamount").val() && $.isNumeric(e) && e > 0) {
            var t = $("input[type=radio][name=currencyRadio]:checked").val();
            $("#weiamount").html('<p class="text-success"><strong>' + toWei(e, t) + " wei ( approximately " + toFiat(e, t, usdval) + " USD/" + toFiat(e, t, eurval) + " EUR )</strong></p>")
        } else $("#weiamount").html("" == $("#sendtxamount").val() || $.isNumeric(e) ? "" : '<p class="text-danger"><strong>Invalid amount</strong></p>')
    }), $("#sendtxaddress").on("paste, keyup", function() {
        validateEtherAddress($("#sendtxaddress").val()) ? $("#addressvalidate").html('<p class="text-success"><strong> Address is valid</strong></p>').fadeIn(50) : "" == $("#sendtxaddress").val() ? $("#addressvalidate").html("") : $("#addressvalidate").html('<p class="text-danger"><strong> Invalid address</strong></p>').fadeIn(50)
    }), $("#privkeypassword").on("paste, keyup", function() {
        $("#privkeypassword").val().length > 6 ? ($("#uploadbtntxt-wallet").hide(), $("#uploadbtntxt-privkey").show(), $("#walletuploadbutton").show()) : $("#walletuploadbutton").hide()
    }), $("#manualprivkey").on("paste, keyup", function() {
        $("#divprikeypassword").hide(), $("#walletuploadbutton").hide(), $("#uploadbtntxt-wallet").hide(), $("#uploadbtntxt-privkey").hide(), $("#manualprivkey").val($("#manualprivkey").val().replace(/(?:\r\n|\r|\n| )/g, "")), 128 == $("#manualprivkey").val().length || 132 == $("#manualprivkey").val().length ? $("#divprikeypassword").show() : 64 == $("#manualprivkey").val().length && ($("#uploadbtntxt-wallet").hide(), $("#uploadbtntxt-privkey").show(), $("#walletuploadbutton").show())
    }), $(".btn-file :file").change(function() {
        if (!(window.File && window.FileReader && window.FileList && window.Blob)) return void alert("The File APIs are not fully supported in this browser. Please use a modern browser");
        var e = $(this),
            t = e.get(0).files ? e.get(0).files.length : 1,
            r = e.val().replace(/\\/g, "/").replace(/.*\//, "");
        e.trigger("fileselect", [t, r])
    }), $(".btn-file :file").on("fileselect", function(e, t, r) {
        $("#fuploadStatus").empty(), $("#walletfilepassword").val(""), PrivKey = "", file = $(".btn-file :file")[0].files[0];
        var a = new FileReader;
        a.onload = function() {
            try {
                walletRequirePass(a.result) ? ($("#walletPasdiv").show(), $("#walletuploadbutton").hide()) : ($("#walletPasdiv").hide(), $("#walletuploadbutton").show(), $("#uploadbtntxt-wallet").show(), $("#uploadbtntxt-privkey").hide())
            } catch (e) {
                $("#fuploadStatus").append('<p class="text-center text-danger"><strong> ' + e + "</strong></p>")
            }
        }, a.readAsText(file);
        var n = $(this).parents(".input-group").find(":text"),
            i = t > 1 ? t + " files selected" : r;
        n.length ? n.val(i) : i && $("#fuploadStatus").append('<p class="text-center text-success"><strong> File Selected: ' + i + "</strong></p>")
    })
}

function preSendTransaction(signedTx) {
    sendTransaction(signedTx, function(e) {
         sendingCompleted=true;

        $("#txsendstatus").html('<p class="text-center text-success"><strong> Transaction submitted. TX ID: ' + e + "</strong></p>"); 
    }, function(e) {
        $("#txsendstatus").html('<p class="text-center text-danger"><strong>' + e + "</strong></p>")
    }), $("#sendTransaction").modal("hide")
}

function preCreateTransaction(toAddress, toAmount) {
    try {
        $("#tarawtx").val(""), $("#tasignedtx").val(""), $("#txsendstatus").html("");
        var e =toAddress;
        if (64 != PrivKey.length){ 

            $transactionScope.sendInfo={};
            $transactionScope.sendInfo['message']= "Your private key is not setup properly. Please contact us about this at info@simpleetherwallet.com. Sorry about that. Totally a technical glitch.";
            throw "Invalid Private key, try again";
   
         }
        if (!validateEtherAddress(e)) {

             $transactionScope.sendInfo={};
            $transactionScope.sendInfo['message']= "That address is invalid. Please try another. Make sure it's an ether wallet.";
           
            throw "Invalid to Address, try again";
        }

        var t = 'ether',
            r = toWei(toAmount, t);
        createTransaction(PrivKey, e, r, function(r) {

          
            console.log(r.signed);
            console.log(r.raw);

            preSendTransaction(r.signed);

           // $("#tarawtx").val(r.raw), $("#tasignedtx").val(r.signed), $("#txcreatestatus").html('<p class="text-center text-success"><strong> Transaction generated</strong></p>').fadeIn(50), $("#divtransactionTAs").show(), $("#divsendtranaction").show(), $("#confirmAmount").html($("#sendtxamount").val()), $("#confirmCurrancy").html(t), $("#confirmAddress").html(e)
        }, function(e) {
             $transactionScope.sendInfo={};
            $transactionScope.sendInfo['message']= "There was an issue sending your transaction. Please check your network connectivity";
           
            console.log(e)
            //$("#txcreatestatus").html('<p class="text-center text-danger"><strong> ' + e + "</strong></p>").fadeIn(50).fadeOut(3e3), $("#divtransactionTAs").hide(), $("#divsendtranaction").hide()
        })
    } catch (a) {

         $transactionScope.sendInfo={};
            $transactionScope.sendInfo['message']= "There was an issue sending your payment. Please check your network connectivity and the address you're sending to.";
             
        console.log('<p class="text-center text-danger"><strong> ' + a + "</strong></p>"); $("#divtransactionTAs").hide(), $("#divsendtranaction").hide()
    }
}

function setWalletBalance() {
    getBalance($("#accountAddress").html(), function(e) {
        if (e.error) alert(e.msg);
        else {
            var t = getBestEtherKnownUnit(e.data.balance);
            $("#accountBalance").html(t.amount + " " + t.unit), getETHvalue("USD", function(e) {
                usdval = toFiat(t.amount, t.unit, e), $("#accountBalanceUsd").html(formatCurrency(parseFloat(usdval), "$") + " USD")
            }), getETHvalue("EUR", function(e) {
                eurval = toFiat(t.amount, t.unit, e), $("#accountBalanceEur").html(formatCurrency(parseFloat(eurval), "&euro;") + " EUR")
            }), getETHvalue("BTC", function(e) {
                btcval = toFiat(t.amount, t.unit, e), $("#accountBalanceBtc").html(btcval + " BTC")
            })
        }
    })
}

function walletDecryptSuccess() {
    var e = formatAddress(strPrivateKeyToAddress(PrivKey), "hex");
    $("#accountAddress").html(e), $(".walletaddressIdenticon").css("background-image", "url(" + blockies.create({
        seed: e,
        size: 8,
        scale: 16
    }).toDataURL() + ")"), setWalletBalance(), $("#decryptStatus").html('<p class="text-center text-success"><strong> Wallet successfully decrypted</strong></p>').fadeIn(2e3), $("#wallettransactions").show()
}

function walletDecryptFailed(e) {
    $("#decryptStatus").html('<p class="text-center text-danger"><strong> ' + e + "</strong></p>").fadeIn(50).fadeOut(3e3), $("#wallettransactions").hide()
}

function formatCurrency(e, t) {
    return t + " " + e.toFixed(2).replace(/(\d)(?=(\d{3})+\.)/g, "$1,")
}

function decryptFormData() {
    if (PrivKey = "", "fupload" == decryptType) {
        file = $(".btn-file :file")[0].files[0];
        var e = new FileReader;
        e.onload = function() {
            try {
                PrivKey = getWalletFilePrivKey(e.result, $("#walletfilepassword").val()), walletDecryptSuccess()
            } catch (t) {
                walletDecryptFailed(t)
            }
        }, e.readAsText(file)
    } else if ("privkey" == decryptType) try {
        PrivKey = decryptTxtPrivKey($("#manualprivkey").val(), $("#privkeypassword").val()), walletDecryptSuccess()
    } catch (t) {
        walletDecryptFailed("Invalid password")
    }
}

function hideAllMainContainers() {
    $("#paneWalgen").hide(), $("#paneBulkgen").hide(), $("#paneSendTrans").hide(), $("#panePopContracts").hide(), $("#paneHelp").hide(), $("#paneContact").hide(), $("#panePrint").hide(), $("#bulk-generate").parent().removeClass("active"), $("#generate-wallet").parent().removeClass("active"), $("#send-transaction").parent().removeClass("active"), $("#popular-contracts").parent().removeClass("active"), $("#help").parent().removeClass("active"), $("#contact").parent().removeClass("active")
}

function generateSingleWallet() {

    console.log('loading wallet')
    
    //check for existing wallet
    var generateNew=null;

    if(localStorage.getItem('myWallet') =="null" ||localStorage.getItem('myWallet') ==null ){

        generateNew=true;
    }
    else{
        generateNew = false;

        var r={};
        var n={};

        r.address= localStorage.getItem('myWallet');
        n['private'] = localStorage.getItem('myKey');
        PrivKey= n['private'];
        var address123= r.address;
        var privKey123 = n['private'];
    }

    //change this e... password for secrutiy
    
    if(generateNew==true){

        console.log('generating new')
    var e = "mikechad"

    if ("" == e) return void alert("Please enter a password.");
    if (e.length < 7) return void alert("Your password must be at least 7 characters");
   // $("#generatedWallet").show();
    var t = new Accounts,
        r = t["new"](e);
    $("#address").val(r.address), $("#addressIdenticon").css("background-image", "url(" + blockies.create({
        seed: r.address,
        size: 8,
        scale: 16
    }).toDataURL() + ")");
   

  
    var a = cryptoJSToHex(CryptoJS.SHA3(r.address));
    a = a.substr(a.length - 4);
    var n = t.get(r.address, e);

     var privKey123 = n["private"];
     PrivKey= privKey123;
     var address123 = r.address

     localStorage.setItem('myWallet', address123 );
     localStorage.setItem('myKey', privKey123 );
  
     // return r.address;
   
    }

     

    theCurrentWallet= localStorage.getItem('myWallet');
    $("#privkey").val(n["private"]);
    //r["private"] = r["private"] + a, $("#privkeyenc").val(r["private"]);
    
    $("#qrcodeAdd").empty();
    new QRCode($("#qrcodeAdd")[0], {
        text: r.address,
        width: $("#qrcodeAdd").width(),
        height: $("#qrcodeAdd").width(),
        colorDark: "#000000",
        colorLight: "#ffffff",
        correctLevel: QRCode.CorrectLevel.H
    });

    /*

    $("#qrcode").empty(), new QRCode($("#qrcode")[0], {
        text: n["private"],
        width: $("#qrcode").width(),
        height: $("#qrcode").width(),
        colorDark: "#000000",
        colorLight: "#ffffff",
        correctLevel: QRCode.CorrectLevel.H
    });


    var i = "text/json;charset=UTF-8",
        o = new Blob([JSON.stringify(r)], {
            type: i
        }),
        s = new Blob([JSON.stringify(n)], {
            type: i
        });
    $("#encdownload").attr("href", window.URL.createObjectURL(o)), $("#encdownload").attr("download", r.address + "-Encrypted.json"), $("#unencdownload").attr("href", window.URL.createObjectURL(s)), $("#unencdownload").attr("download", r.address + "-Unencrypted.json"), t.clear()

*/
}

function generateBulkWallets() {
    var e = $("#bulkgenpassword").val(),
        t = $("#numberwallets").val();
    if ("" == t) return void alert("Please enter the amount of wallets you want to generate.");
    if (t != parseInt(t, 10)) return void alert("Digits only please");
    var r = !1;
    if ("" != e && e.length < 7) return void alert("Your password must be at least 7 characters.");
    "" != e && e.length >= 7 && (r = !0), $("#bulkIsEnc").html(r ? " (Encrypted)" : " (Unencrypted)"), $("#generatedbulkwallets").show(), $("#bulkgentable tr:not(:first)").remove();
    for (var a = new Accounts, n = "", i = [], o = [], s = "", l = 0; t > l; l++) {
        if (r) {
            var d = a["new"](e),
                c = cryptoJSToHex(CryptoJS.SHA3(d.address));
            c = c.substr(c.length - 4), d["private"] = d["private"] + c
        } else var d = a["new"]();
        $("#bulkgentable tr:last").after('<tr class="privaddkey"><td><div id="addressIdenticon" class="addressIdenticon-' + l + '"></div></td><td><textarea class="form-control" rows="4" type="text" disabled>' + d.address + '</textarea></td><td><textarea class="form-control" rows="4" type="text" disabled>' + d["private"] + "</textarea></td></tr>"), $(".addressIdenticon-" + l).css("background-image", "url(" + blockies.create({
            seed: d.address,
            size: 8,
            scale: 16
        }).toDataURL() + ")"), n += d.address + "," + d["private"] + "\n", s += d.address + "	" + d["private"] + "\n", i.push({
            address: d.address,
            "private": d["private"]
        }), o.push({
            address: d.address,
            "private": a.get(d.address, e)["private"]
        })
    }
    var p = new Blob([n], {
            type: "text/csv;charset=UTF-8"
        }),
        u = new Blob([s], {
            type: "text/plain;charset=UTF-8"
        }),
        v = new Blob([JSON.stringify(i)], {
            type: "text/json;charset=UTF-8"
        }),
        h = "bulk_ether_accounts";
    $("#bulkexportjson").attr("href", window.URL.createObjectURL(v)), $("#bulkexportjson").attr("download", h + ".json"), $("#bulkexportcsv").attr("href", window.URL.createObjectURL(p)), $("#bulkexportcsv").attr("download", h + ".csv"), $("#bulkexporttxt").attr("href", window.URL.createObjectURL(u)), $("#bulkexporttxt").attr("download", h + ".txt"), $("#bulkwalletprint").unbind(), $("#bulkwalletprint").click(function() {
        openPrintPaperWallets(JSON.stringify(o))
    }), a.clear()
}

function openPrintPaperWallets(e) {
    var t = window.open("about:blank", "_blank");
    data = '<html><head><link rel="stylesheet" href="css/etherwallet-master.min.css"/><script type="text/javascript" src="js/jquery-1.11.3.min.js"></script><script type="text/javascript" src="js/etherwallet-static.min.js"></script><script type="text/javascript">function generateWallets(){    var json = JSON.parse($("#printwalletjson").html());    for(var i=0;i<json.length;i++){        var walletTemplate = $(\'<div/>\').append($("#print-container").clone());        new QRCode($(walletTemplate).find("#paperwalletaddqr")[0], {		  text: json[i][\'address\'],		  colorDark: "#000000",		  colorLight: "#ffffff",		correctLevel: QRCode.CorrectLevel.H	   });       new QRCode($(walletTemplate).find("#paperwalletprivqr")[0], {		  text: json[i][\'private\'],		  colorDark: "#000000",		  colorLight: "#ffffff",		correctLevel: QRCode.CorrectLevel.H	   });       $(walletTemplate).find("#paperwalletadd").html(json[i][\'address\']);       $(walletTemplate).find("#paperwalletpriv").html(json[i][\'private\']);       walletTemplate = $(walletTemplate).find("#print-container").show();       $("body").append(walletTemplate);    }    setTimeout(function(){window.print();},2000);}</script></head><body><span id="printwalletjson" style="display: none;">{{WALLETJSON}}</span><div class="print-container" style="display: none; margin-bottom: 28px;" id="print-container">        <img src="images/logo-1.png" class="ether-logo-1" height="100%" width="auto"/>        <img src="images/logo-2.png" class="ether-logo-2"/>        <img src="images/ether-title.png" height="100%" width="auto" class="print-title"/>          <div class="print-qr-code-1">          <div id="paperwalletaddqr"></div>            <p class="print-text" style="padding-top: 25px;">YOUR ADDRESS</p>          </div>          <div class="print-qr-code-2">            <div id="paperwalletprivqr"></div>            <p class="print-text" style="padding-top: 30px;">YOUR PRIVATE KEY</p>          </div>          <div class="print-notes">            <img src="images/notes-bg.png" width="90%;" height="auto" class="pull-left" />            <p class="print-text">AMOUNT / NOTES</p>          </div>        <div class="print-address-container">          <p>            <strong>Your Address:</strong><br />            <span id="paperwalletadd"></span>          </p>          <p>            <strong>Your Private Key:</strong><br />            <span id="paperwalletpriv"></span>        </p>    </div></div></body></html>', data = data.replace("{{WALLETJSON}}", e), t.document.write(data), $(t).ready(function() {
        t.document.write("<script>generateWallets();</script>")
    })
}

function printQRcode() {
    var e = $("#address").val(),
        t = $("#privkey").val(),
        r = [];
    r.push({
        address: e,
        "private": t
    }), openPrintPaperWallets(JSON.stringify(r))
}

function getBalance(e, t) {
    $.post(SERVERURL, {
        balance: e
    }).done(t)
}

function getTransactionData(e, t) {
    $.post(SERVERURL, {
        txdata: e
    }).done(t)
}

function sendRawTx(e, t) {
    $.post(SERVERURL, {
        rawtx: e
    }).done(t)
}

function getEstimatedGas(e, t) {
    $.post(SERVERURL, {
        estimatedGas: e
    }).done(t)
}

function getEthCall(e, t) {
    $.post(SERVERURL, {
        ethCall: e
    }).done(t)
}

function getETHvalueKraken(e, t) {
    var r = "XETH";
    $.post(KRAKENAPI + "Ticker", {
        pair: r + e
    }).done(function(a) {
        t(a.result[r + e].o)
    })
}

function getETHvalue(e, t) {
    var r = "eth";
    e = e.toLowerCase(), $.get(COINMARKETCAPAPI + r, function(r) {
        t(parseFloat(r.price[e]).toFixed(6))
    })
}

function createTransaction(e, t, r, a, n) {
    if (64 != e.length) return void n("Invalid Private key, try again");
    if (!validateEtherAddress(t)) return void n("Invalid to Address, try again");
    if (!$.isNumeric(r) || 0 >= r) return void n("Invalid amount, try again");
    var i = new Buffer(e, "hex"),
        o = strPrivateKeyToAddress(e);
    getTransactionData(o, function(e) {
        if (e.error) return void n("Error occurred: " + e.msg);
        e = e.data;
        var o = padLeftEven(BNtoHex(new BigNumber(e.nonce))),
            s = padLeftEven(BNtoHex(new BigNumber(e.gasprice).plus(1e9).toDigits(1))),
            l = padLeftEven(BNtoHex(new BigNumber(stdTransactionGas))),
            d = padLeftEven(BNtoHex(new BigNumber(String(r)))),
            c = {
                nonce: "0x" + o,
                gasPrice: "0x" + s,
                gasLimit: "0x" + l,
                to: t,
                value: "0x" + d,
                data: ""
            },
            p = new Tx(c);
        p.sign(i), verifyUpFrontCost(c, function(t) {
            if (t > e.balance) return void n("You dont have enough balance in your account to process is transaction");
            var r = "0x" + p.serialize().toString("hex"),
                i = {
                    raw: JSON.stringify(c),
                    signed: r
                };
            a(i)
        }, n)
    })


$transactionScope.sendInfo={};
$transactionScope.sendInfo['message']= "Payment Sent! Please allow up to 19 seconds for the payment to be confirmed by the network. Cheers!";

setTimeout(function(){

    $transactionScope.sendInfo=null;
    $transactionScope.sendInfo['message']= "";
           
}, 8000)
           
}

function createTransactionFromRaw(e, t, r, a) {
    if (64 != t.length) return void a("Invalid Private key, try again");
    if (!validateEtherAddress(e.from) || !validateEtherAddress(e.to)) return void a("Invalid Address, try again");
    if (!$.isNumeric(e.value) || e.value <= 0) return void a("Invalid amount, try again");
    var n = new Buffer(t, "hex"),
        i = strPrivateKeyToAddress(t);
    getTransactionData(i, function(t) {
        if (t.error) return void a("Error occurred: " + t.msg);
        t = t.data;
        var i = padLeftEven(BNtoHex(new BigNumber(t.nonce))),
            o = padLeftEven(BNtoHex(new BigNumber(t.gasprice).plus(1e9).toDigits(1))),
            s = padLeftEven(BNtoHex(new BigNumber(e.gas))),
            l = padLeftEven(BNtoHex(new BigNumber(String(e.value)))),
            d = {
                nonce: "0x" + i,
                gasPrice: "0x" + o,
                gasLimit: "0x" + s,
                to: e.to,
                value: "0x" + l,
                data: "0x" + e.data
            },
            c = new Tx(d);
        c.sign(n), verifyUpFrontCost(d, function(e) {
            if (e > t.balance) return void a("You dont have enough balance in your account to process is transaction");
            var n = "0x" + c.serialize().toString("hex"),
                i = {
                    raw: JSON.stringify(d),
                    signed: n
                };
            r(i)
        }, a)
    })
}

function verifyUpFrontCost(e, t, r) {
    getEstimatedGas(e, function(a) {
        if (a.error) r("Error occurred: " + a.msg);
        else if (new BigNumber(formatHexString(a.data, "hex")).greaterThan(new BigNumber(formatHexString(e.gasLimit, "hex")))) r("Gas limit is too low");
        else {
            var n = new BigNumber(formatHexString(e.gasPrice, "hex")).times(new BigNumber(formatHexString(e.gasLimit, "hex")));
            t(n.plus(new BigNumber(formatHexString(e.value, "hex"))).toNumber())
        }
    })
}

function getMaxSendAmount(e, t, r) {
    getTransactionData(e, function(e) {
        if (e.error) return void r("Error occurred: " + e.msg);
        e = e.data;
        var a = new BigNumber(e.gasprice).plus(1e9).toDigits(1).times(stdTransactionGas),
            n = new BigNumber(String(e.balance)).minus(a);
        n.lessThan(0) ? r("Not enough balance to send a transaction") : t(toEther(n.toString(), "wei"))
    })
}

function sendTransaction(e, t, r) {
    sendRawTx(e, function(e) {
        return e.error ? void r("Error occurred: " + e.msg) : void t(e.data)
    })
}

function BNtoHex(e) {
    return e.toString(16)
}

function padLeftEven(e) {
    return e.length % 2 != 0 ? "0" + e : e
}

function formatHexString(e, t) {
    return "hex" == t ? "0x" == e.substring(0, 2) ? e : "0x" + e : "raw" == t ? "0x" == e.substring(0, 2) ? e.substring(2) : e : void 0
}

function fiatToWei(e, t) {
    var r = new BigNumber(String(e)).div(t).times(getValueOfUnit("ether")).round(0);
    return r.toString(10)
}

function toFiat(e, t, r) {
    var a = new BigNumber(toEther(e, t)).times(r).round(5);
    return a.toString(10)
}

function toEther(e, t) {
    var r = new BigNumber(toWei(e, t)).div(getValueOfUnit("ether"));
    return r.toString(10)
}

function toWei(e, t) {
    var r = new BigNumber(String(e)).times(getValueOfUnit(t));
    return r.toString(10)
}

function getValueOfUnit(e) {
    e = e ? e.toLowerCase() : "ether";
    var t = unitMap[e];
    if (void 0 === t) throw new Error("This unit doesn't exists, please use the one of the following units" + JSON.stringify(unitMap, null, 2));
    return new BigNumber(t, 10)
}

function getBestEtherKnownUnit(e) {
    e = String(e);
    var t = "wei",
        r = new BigNumber(e);
    for (var a in knownUnitMap) knownUnitMap.hasOwnProperty(a) && new BigNumber(e).greaterThan(new BigNumber(knownUnitMap[a])) && (t = a, r = new BigNumber(e).div(new BigNumber(knownUnitMap[a])));
    return {
        unit: t,
        amount: r.toDigits(10).toString(10)
    }
}

function decryptPresaleKey(e, t) {
    e = JSON.parse(e);
    var r = hexToBytes(e.encseed),
        a = hexToCryptoJS(bytesToHex(r.slice(0, 16))),
        n = hexToCryptoJS(bytesToHex(r.slice(16))),
        i = sha256.pbkdf2(stringToBytes(t), stringToBytes(t), 2e3, 16),
        o = hexToBytes(bytesToHex(i)).slice(0, 16),
        s = CryptoJS.AES.decrypt({
            ciphertext: n
        }, hexToCryptoJS(bytesToHex(o)), {
            iv: a,
            mode: CryptoJS.mode.CBC,
            padding: CryptoJS.pad.Pkcs7
        }),
        l = cryptoJSToHex(s);
    s = hex2str(l);
    var d = CryptoJS.SHA3(s, {
            outputLength: 256
        }),
        c = d.toString();
    if (verifyPrivKey(c, e.ethaddr)) return c;
    throw "Invalid Password"
}

function decryptGethKeyV3(e, t) {
    e = JSON.parse(e), null == e.Crypto && null != e.crypto && (e.Crypto = e.crypto);
    var r = e.Crypto.cipherparams.iv,
        a = e.Crypto.ciphertext,
        n = getKDFKey(e.Crypto, t),
        i = hexToBytes(bytesToHex(n)).slice(0, 16),
        o = CryptoJS.AES.decrypt({
            ciphertext: hexToCryptoJS(a)
        }, hexToCryptoJS(bytesToHex(i)), {
            mode: CryptoJS.mode.CTR,
            padding: CryptoJS.pad.ZeroPadding,
            iv: hexToCryptoJS(r)
        }),
        s = cryptoJSToHex(o);
    if (verifyPrivKey(s, e.address)) return s;
    throw "Invalid Password"
}

function decryptTxtPrivKey(e, t) {
    if (128 == e.length) var r = CryptoJS.AES.decrypt(e, t),
        a = hex2str(cryptoJSToHex(r));
    else if (132 == e.length) {
        var r = CryptoJS.AES.decrypt(e.substr(0, 128), t),
            a = hex2str(cryptoJSToHex(r)),
            n = e.substr(e.length - 4),
            i = formatAddress(strPrivateKeyToAddress(a), "hex"),
            o = cryptoJSToHex(CryptoJS.SHA3(i));
        if (o.substr(o.length - 4) != n) throw "Invalid Password"
    } else {
        if (64 != e.length) throw "Error while decrypting your wallet";
        var a = e
    }
    return a
}

function decryptEthWalletJson(e, t) {
    if (e = JSON.parse(e), e.locked && 128 == e["private"].length) var r = CryptoJS.AES.decrypt(e["private"], t),
        a = hex2str(cryptoJSToHex(r));
    else if (e.locked && 132 == e["private"].length) var r = CryptoJS.AES.decrypt(e["private"].substr(0, 128), t),
        a = hex2str(cryptoJSToHex(r));
    else {
        if (e.locked || 64 != e["private"].length) throw "Error while decrypting your wallet";
        var a = e["private"]
    }
    if (verifyPrivKey(a, formatAddress(e.address, "raw"))) return a;
    throw "Invalid Password"
}

function walletRequirePass(e) {
    var t;
    try {
        t = JSON.parse(e)
    } catch (r) {
        throw "not a valid wallet file"
    }
    if (null != t.encseed) return !0;
    if (null != t.Crypto || null != t.crypto) return !0;
    if (null != t.hash && t.locked) return !0;
    if (null == t.hash || t.locked) throw "Sorry! we dont have a clue what kind of wallet file this is.";
    return !1
}

function verifyPrivKey(e, t) {
    return 64 != e.length ? !1 : strPrivateKeyToAddress(e) != t ? !1 : !0
}

function getWalletFilePrivKey(e, t) {
    var r = JSON.parse(e);
    if (null != r.encseed) return decryptPresaleKey(e, t);
    if (null != r.Crypto || null != r.crypto) return decryptGethKeyV3(e, t);
    if (null != r.hash) return decryptEthWalletJson(e, t);
    throw "Sorry! we dont have a clue what kind of wallet file this is."
}

function formatAddress(e, t) {
    return "0x" == e.substr(0, 2) && "raw" == t && (e = e.substr(2)), "0x" != e.substr(0, 2) && "hex" == t && (e = "0x" + e), e
}

function strPrivateKeyToAddress(e) {
    var t = ethUtil.privateToPublic(new Buffer(e, "hex"));
    return ethUtil.publicToAddress(t).toString("hex")
}

function getKDFKey(e, t) {
    var r = hexToBytes(e.kdfparams.salt),
        a = stringToBytes(t),
        n = e.kdfparams.dklen;
    if ("scrypt" == e.kdf) {
        var i = e.kdfparams.n,
            o = e.kdfparams.r,
            s = e.kdfparams.p,
            l = scrypt_module_factory(335544320);
        return l.crypto_scrypt(a, r, i, o, s, n)
    }
    if ("pbkdf2" == e.kdf) {
        var d = e.kdfparams.c,
            c = (e.kdfparams.prf, sha256.pbkdf2(stringToBytes(t), hexToBytes(e.kdfparams.salt), d, n));
        return c
    }
}

function hexToCryptoJS(e) {
    return CryptoJS.enc.Hex.parse(e)
}

function cryptoJSToHex(e) {
    return CryptoJS.enc.Hex.stringify(e)
}

function validateEtherAddress(e) {
    return 42 == e.length && "0x" == e.substr(0, 2) && /^[0-9A-F]+$/i.test(e.substr(2))
}

function hex2str(e) {
    for (var e = e.toString(), t = "", r = 0; r < e.length; r += 2) t += String.fromCharCode(parseInt(e.substr(r, 2), 16));
    return t
}

function bytesToHex(e) {
    for (var t = [], r = 0; r < e.length; r++) t.push((e[r] >>> 4).toString(16)), t.push((15 & e[r]).toString(16));
    return t.join("")
}

function hexToBytes(e) {
    for (var t = [], r = 0; r < e.length; r += 2) t.push(parseInt(e.substr(r, 2), 16));
    return t
}

function stringToBytes(e) {
    for (var t = [], r = 0; r < e.length; ++r) t.push(e.charCodeAt(r));
    return t
}
var PrivKey = "",
    decryptType = "",
    usdval, eurval, btcval;
$(document).ready(function() {
    bindElements(), checkAndLoadPageHash(), checkAndRedirectHTTPS()
});
var SERVERURL = "https://rpc.myetherwallet.com/api.php",
    KRAKENAPI = "https://api.kraken.com/0/public/",
    COINMARKETCAPAPI = "https://coinmarketcap-nexuist.rhcloud.com/api/",
    stdTransactionGas = 21e3,
    knownUnitMap = {
        wei: "1",
        kwei: "1000",
        gwei: "1000000000",
        szabo: "1000000000000",
        finney: "1000000000000000",
        ether: "1000000000000000000"
    },
    unitMap = {
        wei: "1",
        kwei: "1000",
        ada: "1000",
        femtoether: "1000",
        mwei: "1000000",
        babbage: "1000000",
        picoether: "1000000",
        gwei: "1000000000",
        shannon: "1000000000",
        nanoether: "1000000000",
        nano: "1000000000",
        szabo: "1000000000000",
        microether: "1000000000000",
        micro: "1000000000000",
        finney: "1000000000000000",
        milliether: "1000000000000000",
        milli: "1000000000000000",
        ether: "1000000000000000000",
        kether: "1000000000000000000000",
        grand: "1000000000000000000000",
        einstein: "1000000000000000000000",
        mether: "1000000000000000000000000",
        gether: "1000000000000000000000000000",
        tether: "1000000000000000000000000000000"
    };






//added by mikechad



function getTransactions(){

    
}



function convertData(theInfo){

    
   for(rr=0; rr<theInfo.length; rr++){
    theInfo[rr]['time1'] = new Date(theInfo[rr]['time']).getTime();
   }

   return theInfo;
}